// Longest consecutive sequence

function getAns(int arr[]){
    Set<Integer>set =new HashSet<Integer>();
    int max=0;
    for(int i:arr){
        set.add(i);
    }
    
    for(int i :arr){

    // searcing for left 
        int count=1;
        while(set.contains(i)){
            set.remove(i);
            count=count+1;
            i--;
        }
    // searcing for right

        while(set.contains(i)){
            set.remove(i);
            count=count+1;
            i++;
        }

        max=Math.max(max,count);
    }
    return max;
}


// Balanced binary tree
The maximum difference between heights of left and right subtree =1


class Solution {
    public boolean  res=true;
    public boolean isBalanced(TreeNode root) {
        helper(root);
        return res;
    }
    public  int helper(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=helper(root.left);
        int right=helper(root.right);
        
        if(Math.abs(left-right)>1){
            res=false;
        }
        return 1+ (Math.max(left,right));
    }
}
Time complexity: O(N)