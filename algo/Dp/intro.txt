Dynamic programming is startegy for solving problems 
1.Used for solving optimization problems
    
    - greedy also is used for solving
        1. In greedy method we follw a procudere to solve problems
        2. The procedure itself is called optimized one 
        3.kruskal , Dijkstra ...
        4.Descion is taken once and followed throughout


2.Find all the posible and find out the optimal one 
3.Problems are solved using recursive  and iterative approach
4.It follows principle of optimality 
5.Descesion are taken in every step

example of fibonacci series
//Recursive approach
//Time complexity : O( 2 **n)
//Space complexity: O(1)

function fib(int n){
    if(n < 1){
        return n;
    }
    return fib(n-1)+fib(n-2);
}
This approach forms a tree of fibonacci 

              fib(4)
             /     \
        fib(3)     fib(2)
          /\           /  \
    fib(2) fib(1)  fib(1)  fib(0)
    /\
fib(1)  fib(0)


and we can see some call are repeting we can get rid of the repeting call 
by storing the result in the and using them again 

1.Initializating an array of size n+1 to handle fib(0)
2.Marking all the elements of the array as -1

int arr=[]
for i in n+1 
    arr[i]=-1

3.Now for fib(n) we need to check if memo[n] is equal to -1 or not.
  If it is -1 then we can say that the problem was not solved before and we will solve it. 
  But if it is other than -1 then we can say that the problem was solved before.
  So we donâ€™t have to solve it again. We will just return it.


// code 
// The complexity : O(N)
//space complexity: O(N+1)

int arr=[n+1]

function fib(n){
    if(n<=1) {
        return n;
    }
    if(arr[n]!=-1){
        return arr[n];
    }
    arr[n] =fib(n-1)+fib(n-2);

    return arr[n];
}