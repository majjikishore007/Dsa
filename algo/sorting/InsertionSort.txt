The idea is simple 
To sort an array of size n in ascending order: 
1: Iterate from arr[1] to arr[n] over the array. 
2: Compare the current element (key) to its predecessor. 
3: If the key element is smaller than its predecessor, compare it to the elements before. 
Move the greater elements one position up to make space for the swapped element.

function insertionSort(int arr[]){
    int n=arr.length;
    for (int i=1;i<n;i++){
        int key=arr[i]
        j=i-1;

        while( j>=0 && arr[j]>key){
            // drag the elemnt to the cuur position
            arr[j+1]=arr[j]
            j-=1
        }
        arr[j+1]=temp
    }


}

Time complexity : O(N^2)
Space Complixity :O(1)
best case : O(N)

bubble Sort comparisions n^2  swaps n^2/2
selection sort comparison (n^2)/2 swaps n
insertion sort comparsion (n^2)/4 and swaps n^2/8