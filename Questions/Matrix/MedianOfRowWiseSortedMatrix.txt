Input : 1 3 5
        2 6 9
        3 6 9
size of the matrix N*M

approach 1:

The naive approach to the problem is to create a 
Array of size (N*M) and storing all the elements of matrix into it 
the performing sorting and return the mid value of the array. 

space complexity: O(N*M)
time complexity : O(N*M log (N*M))


approach 2:

The efficient approach to the problem is performing binearySearch

algorithm
The idea is that there must be exactly n/2 number less than the median 

step1:
    find the min and max values of the matrix 
    min can be calculated by comparing first element of each row 
    max can be calculated by comparing last element of each row 

step2:
    then we calculate the number less the mid (mid=(min+max/2)) 
    using binary search algorithm   

step3
    for a number to be median there must be (N*M)/2 number less than the median
    so for every numner we get the count of number less or equal to the median 

    if count <required number
        min=mid+1
    else 
        max=mid


code //

public static  int median(int arr[][], int r, int c) {
    int max=Integer.MIN_VALUE;
    int min=Integer.MAX_VALUE;
    
    for(int i=0;i<c;i++){
        if(arr[0][i]<min){
            min=arr[0][i];
        }
        if(arr[i][c-1]>max){
            max=arr[i][c-1];
        }
        
    }

    int desired=(r*c+1)/2;

    while(min<max){
        int mid=(min+max)/2;
        int count=0;

        for(int i=0;i<r;i++){
            count=Arrays.binarySearch(arr[i],mid);
        }

        if(count<desired){
            min=mid+1;
        }
        else{
            max=mid;
        }
    }
    return mid;
}