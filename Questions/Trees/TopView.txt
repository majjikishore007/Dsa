class Pair<U,V>{
	private final U f;
	private final V s;

	private Pair(U f,V s){
		this.f = f;
		this.s = s;
	}
	// creates a imutable types
	public static <U, V> Pair <U, V> of(U a, V b)
    {
        return new Pair<>(a, b);
    }
}
class Solution {
	/* This is the Node class definition
	
	class Node {
		public Node left;
		public Node right;
		public int data;

		public Node(int data) {
			this.data = data;
		}
	}
	*/
	
	int[] topView(Node root) {
	    // add your logic here
		// Map contains int dist int  node.data int level 
        Map<Integer, Pair<U, V>> map= new TreeMap<>();

		helper(0 ,root,0,map);
	}
	public void helper(int dist , Node root , int level , Map<Integer, Pair<U, V>> map){
		if(root == null){
			return;
		}
		// if map doesnt containsKey or the level of the current node is  less than node node level
		if(!map.containsKey(dist)|| level < map.get(dist).s){
				map.put(dist, Pair.of(root.data,level));
		}
		helper(dist-1,root.left,level+1,map);
		helper(dist+1,root.right,level+1,map);
	}
}