
   // i + minJump <= j <= min(i + maxJump, s.length - 1), and
   // s[j] == '0'.


public boolean canReach(String s, int minJump, int maxJump) {
    
        int L=s.length();

        int i=0,j=1;


        while (j < L) {
            if(s.charAt(j) == '0' && (i + minJump <= j) && (j <= Math.min(i + maxJump,))){
                i=j;
            }
            j++;
        }
        if(i==L-1){
            return true;
        }
        return false;
}

//Time complexity: O(N)
//Space complexity: O(N)

function getans(String s,min,max){

 if(s.charAt(s.length() - 1) == '1') {
            return false;
        }
        
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.offer(0);
        for(int i = 1; i < s.length(); i++) {
            if(s.charAt(i) == '0') {
                
                while(!queue.isEmpty() && queue.peek() < i - max) {
                    queue.poll();
                }
                
                if(queue.isEmpty()) {
                    return false;
                }
                int prev = queue.peek();
                
                if(prev >= i - max && prev <= i - min) {
                    queue.offer(i);
                    if(i == s.length() - 1) {
                        return true;
                    }
                }
            }
        }
        return false;
}