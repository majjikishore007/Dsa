Given a linked list, swap every two adjacent nodes and return its head.
You must solve the problem without modifying the 
values in the list's nodes (i.e., only nodes themselves may be changed.)

Input
1->2->3->4->5->6

Output
2->1->4->3->6->5

approcah

the idea is to use two pointer 

public ListNode swapPairs(ListNode head) {
        //creating a dummy node 
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode curr = dummy;
       // 0->1->2->3->4->5->6
        while (curr.next != null && cur.next.next != null) {
            ListNode first = curr.next;
            ListNode second = curr.next.next;

            first.next =second.next;
            curr.next = second;
            second.next = first;
            cur=curr.next.next;
        }
        return head;
}

Time complexity: O(N)
Space complexity: O(1)