/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
//Time compliexity :O(N)
//space compliexity: O(N)

  public Node copyRandomList(Node head) {
        if(head==null){
            return null;
        }
        
        Node dummy=new Node(0);
        Node curr=head,temp=dummy;
        
        //level 1 -copying the next pointer 
        while(curr!=null){
            Node new_node=new Node(curr.val);
            temp.next=new_node;
            temp=temp.next;
            curr=curr.next;
        }
        
        Map<Node,Node>map=new HashMap<>();
        curr=head;
        temp=dummy.next;
        while(curr!=null){
            map.put(curr,temp);
            curr=curr.next;
            temp=temp.next;
        }
        System.out.println(map);
        // copying the random 
        curr=head;
        temp=dummy.next;
        
        while(curr!=null){
            if(curr.random==null){
                temp.random=null;
            }
            else {
                temp.random=map.get(curr.random);
            
            }
            curr=curr.next;
            temp=temp.next;
        }
        
        
        return dummy.next;
    }
