/**A critical point in a linked list is defined as either a local maxima or a local minima.

A node is a local maxima if the current node has a value strictly greater than the previous node and the next node.

A node is a local minima if the current node has a value strictly smaller than the previous node and the next node.

Note that a node can only be a local maxima/minima if there exists both a previous node and a next node.
*/


//Idea is iterative the list using two pointers
//prev and curr

//  if critical points
//The keep track of the fist index of the critical point and last index 
// the Max will be =last_index-f_index

// update the curr index for getting the minimum value 


//Time compliexity : O(N)
//space compliexity: O(1)


public int[] nodesBetweenCriticalPoints(ListNode head) {
      
        
        int f_index=-1;
        int l_index=-1;
        
        
        int min=Integer.MAX_VALUE;
        int count=1;
        
        ListNode curr=head.next;
        int arr[]=new int[]{-1,-1};
        
       ListNode prev=head;
        while(curr!=null && curr.next!=null ){
            
            // local min
            if((curr.val<prev.val && curr.val <curr.next.val) ||(curr.val>prev.val && curr.val >curr.next.val)){
                // System.out.println(temp.val);
                if(f_index==-1){
                    f_index=count;
                    l_index=count;
                }
                else {
                    min=Math.min(min,count-l_index);
                    l_index=count;
                    
                }
                
            }
            prev=curr;
            curr=curr.next;
            count++;
            
        }
        if(f_index==l_index){
            return arr;
        }
        arr[0]=min;
        arr[1]=l_index-f_index;
        return arr;
        
    }