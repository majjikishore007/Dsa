// merge intervals 
class Solution {
    public int[][] merge(int[][] intervals) {
        // corner case 
        if(intervals.length==0){
            return intervals;
        }
        Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));
        List<int []>list=new ArrayList<>();
        int [] curr=intervals[0];
        list.add(curr);
        for(int interval[]:intervals){
            if(curr[1]>=interval[0]){
                curr[1]=Math.max(curr[1],interval[1]);
            }
            else{
                curr=interval;
                list.add(curr);
            }
        }
        return list.toArray(new int [list.size()][]);
    }
}
//Time =O(n+m);
// space complexity: O(1)


// next permutaion 

//step 1 
check for arr[i+1]=<arr[i]; from end of the array

// step 2

if(got case in step 1){
    then swap with the next highest number of the that number 
}

// step 3

now reverse the entire subarry form index i to n-1;


//code 
given int arr[]={1,2,3};

output expected ={1,3,2}

function getNextPermutaio(int arr[],int N){

//step1
int i=N-1;
while(i>=0 && arr[i+1]<=arr[i]){
    i--;
}

// step 2
if(i>=0){
    //finding the next highest number to arr[i] and swaping it 

    int j=N-1;
    while(j>=0){
        if(arr[j]<=arr[i]){
            // number less the arr[i] case
            j--;
        }
    }

    // after the number found
    //swap
    int temp=arr[j];
    arr[j]=arr[i];
    arr[i]=temp;

    // step3 reverse the subarry (arr,i+1,N)

    int low=i+1,high=N-1;
    while(low<high){
        int temp=arr[high];
        arr[high]=arr[low];
        arr[low]=temp;
        low++;high--;
        }
    }   
}

// time complexity :O(N);
// space complexity: O(1)





