//genrating all the perputaions of an array of
//there are n! perputaions of a n number of elemen

// brute fore approach will be of n2

//the best posible approach will implenting the merge sort and making a slight change of

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        int res= inversionCount_helper_sort(arr, 0,N-1);
    }
    static long inversionCount_helper_sort(long arr[], long low ,long high){
        int count=0;
            if(low<high){
                long mid=low+high/2;
                count+=inversionCount_helper_sort(arr,low,mid);
                count+=inversionCount_helper_sort(arr,mid+1,high);
                count+=inversionCount_helper_merge(arr,low,mid,high);
            }   
            return count;
    }
    static long inversionCount_helper_merge(long arr[],long low ,long high,long mid){
            int left[]=Arrays.copyOfrange(arr, (int)low, (int)mid+1);
            int right[]=Arrays.copyOfrange(arr, (int)mid+1, (int)high+1);

            long i=0,j=0,k=low,count=0;
            while(i<left.length && j<right.length){
                if(left[(int)i]<=right[(int)j]){
                    arr[(int)k++]=left[(int)i++];
                }else{
                    arr[(int)k++]=right[(int)j++];
                    count+=(mid+1)-(low+i);
                }

            }
            	while (i < left.length) {
			arr[(int) k++] = left[(int) i++];
		}
		while (j < right.length) {
			arr[(int) k++] = right[(int) j++];
		}

		return count;
            
    }
    
    
}


//Question 2